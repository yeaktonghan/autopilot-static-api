
<flow-definition plugin="workflow-job@1360.vc6700e3136f5">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">
            <jobProperties/>
            <triggers/>
            <parameters/>
            <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties>
        <jenkins.model.BuildDiscarderProperty>
            <strategy class="hudson.tasks.LogRotator">
                <daysToKeep>-1</daysToKeep>
                <numToKeep>-1</numToKeep>
                <artifactDaysToKeep>-1</artifactDaysToKeep>
                <artifactNumToKeep>-1</artifactNumToKeep>
            </strategy>
        </jenkins.model.BuildDiscarderProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.3.1">
                    <spec/>
                </com.cloudbees.jenkins.GitHubPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3806.va_3a_6988277b_2">
        <script>
            pipeline {
            agent any
            tools {
            nodejs 'npm'
            }
            environment {
            CURRENT_DATETIME = new Date().format("yyyy-MM-dd-HH-mm-ss")
            }
            stages {
            stage('Clone Repository') {
            steps {
            script {
            checkout([$class: 'GitSCM', branches: [
            [name: 'var-branch']
            ], doGenerateSubmoduleConfigurations: false, extensions: [
            [$class: 'CleanBeforeCheckout']
            ], userRemoteConfigs: [
            [url: 'var-git_src_url']
            ]])
            }
            }
            }
            stage('Add Dockerfile') {
            steps {
            script {
            def dockerfileContent = """
            FROM node:20.9.0-alpine

            WORKDIR /usr/src/docker-react-sample

            COPY package*.json ./

            RUN npm install -f

            COPY . .

            EXPOSE 3000

            CMD ["npm", "start"]
            """
            writeFile file: 'Dockerfile', text: dockerfileContent
            }
            }
            }
            stage('build to docker images') {
            steps {
            script {
            sh 'docker build -t var-image:${CURRENT_DATETIME} .'
            echo "build images successfully"
            }
            }
            }

            stage('Start argo application') {
            steps {
            script {
            sh 'docker run -d -p 3001:3000 var-image:${CURRENT_DATETIME}'
            }
            }
            }
            }
            }
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>