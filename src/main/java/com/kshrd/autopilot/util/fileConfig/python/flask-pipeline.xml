<flow-definition plugin="workflow-job@1348.v32a_a_f150910e">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
            <jobProperties/>
            <triggers/>
            <parameters/>
            <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties>
        <jenkins.model.BuildDiscarderProperty>
            <strategy class="hudson.tasks.LogRotator">
                <daysToKeep>-1</daysToKeep>
                <numToKeep>-1</numToKeep>
                <artifactDaysToKeep>-1</artifactDaysToKeep>
                <artifactNumToKeep>-1</artifactNumToKeep>
            </strategy>
        </jenkins.model.BuildDiscarderProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.3">
                    <spec/>
                </com.cloudbees.jenkins.GitHubPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3802.vd42b_fcf00b_a_c">
        <script>
            pipeline {
            agent any
            environment {
            CURRENT_DATETIME = new Date().format("yyyy-MM-dd-HH-mm-ss")
            }
            stages {
            stage('Clone Repository') {
            steps {
            script {
            checkout([$class: 'GitSCM', branches: [
            [name: 'var-branch']
            ], doGenerateSubmoduleConfigurations: false, extensions: [
            [$class: 'CleanBeforeCheckout']
            ], userRemoteConfigs: [
            [url: 'var-git_src_url']
            ]])
            }
            }
            }
            stage('Add Dockerfile') {
            steps {
            script {
            def dockerfileContent = """
            FROM python:3-alpine3.9

            WORKDIR /app

            COPY requirements.txt .

            RUN apk update
            RUN apk upgrade
            RUN apk add --no-cache build-base libffi-dev openssl-dev libxslt-dev libxml2-dev postgresql-dev musl-dev

            RUN pip install --upgrade pip
            RUN pip install Flask flask_restx psycopg2

            RUN pip install scrapy==2.9.0
            RUN pip install flask_jwt_extended
            RUN pip install apscheduler passlib flask_cors chatter Flask-Cors==4.0.0 passlib==1.7.4 scrapydo==0.2.2 chatterbot==1.0.4
            RUN PyYAML==3.12
            RUN pip install cachetools

            RUN pip install googletrans gunicorn scrapydo

            COPY . .

            EXPOSE 8000
            CMD ["flask", "run", "--host", "0.0.0.0" ,"-p", "8000"]
            """
            writeFile file: 'Dockerfile', text: dockerfileContent
            }
            }
            }
            stage('build to docker images') {
            steps {
            script {
            sh 'docker build -t var-image:${CURRENT_DATETIME} .'
            sh 'docker push var-image:${CURRENT_DATETIME}'
            echo "build images successfully"
            }
            }
            }
            stage('go to repository') {

            steps {
            script {
            //Clone the GitHub repository
            checkout([$class: 'GitSCM',
            branches: [
            [name: '*/main']
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
            [$class: 'CleanBeforeCheckout'],
            [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: true]
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
            [url: "https://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@github.com/KSGA-Autopilot/${GITHUB_REPO}"]
            ]
            ])
            }
            }
            }
            stage('Modify File') {
            steps {
            script {
            //Modify the content of the file
            sh "sed -i 's+var-image.*+var-image:${CURRENT_DATETIME}+g' app/deployment.yaml"
            sh "cat app/deployment.yaml"
            }
            }
            }
            stage('Commit and Push') {
            steps {
            script {
            //Commit the changes
            sh 'git add .'
            sh 'git commit -m "Updated images version" || true'

            //Push the changes back to GitHub
            sh 'git push https://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@github.com/KSGA-Autopilot/${GITHUB_REPO} HEAD:main'
            }
            }
            }
            stage('Start argo application') {
            steps {
            sshagent(['ssh-keygen']) {
            sh 'ssh -o StrictHostKeyChecking=no root@167.71.220.235 "argocd login 192.168.49.2:31459 --username admin --password YOUR-PASSWORD-HERE --insecure"'
            sh 'ssh -o StrictHostKeyChecking=no root@167.71.220.235 kubectl create ns argo-namespace || true'
            sh 'ssh -o StrictHostKeyChecking=no root@167.71.220.235 argocd app create -f argo-application-yaml --upsert'
            }
            }
            }
            }
            }
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>