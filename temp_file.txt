<flow-definition plugin="workflow-job@1348.v32a_a_f150910e">
<actions>
<org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
<org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
<jobProperties/>
<triggers/>
<parameters/>
<options/>
</org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
</actions>
<description/>
<keepDependencies>false</keepDependencies>
<properties>
<jenkins.model.BuildDiscarderProperty>
<strategy class="hudson.tasks.LogRotator">
<daysToKeep>-1</daysToKeep>
<numToKeep>-1</numToKeep>
<artifactDaysToKeep>-1</artifactDaysToKeep>
<artifactNumToKeep>-1</artifactNumToKeep>
</strategy>
</jenkins.model.BuildDiscarderProperty>
<org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
<triggers>
<com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.3">
<spec/>
</com.cloudbees.jenkins.GitHubPushTrigger>
</triggers>
</org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
</properties>
<definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3802.vd42b_fcf00b_a_c">
<script>
pipeline {
    agent {
        node{
            label 'worker1'
        }
    }
   tools{
        maven 'maven'
    }

    environment{
    CURRENT_DATETIME = new Date().format("yyyy-MM-dd-HH-mm-ss")
    GITHUB_REPO = 'yeaktonghan-spring-maven-war-cd'
    }

    stages {

        stage('Clone Repository') {
            steps {
                 script{

                    checkout([$class: 'GitSCM', branches: [[name: 'main']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout']], userRemoteConfigs: [[url: 'https://github.com/yeaktonghan/spring-maven-war.git']]])
            }
        }
        }
        stage('Buid Project'){
            steps{
                script{
                    sh 'mvn package'
                    echo "Build successfully"
                }
            }
        }

         stage('Add Dockerfile') {
            steps {
                script {
                  def jarFile = sh(script: 'find . -name *-0.0.1-SNAPSHOT.war' , returnStdout: true).trim()

def jarFileName = jarFile.substring(jarFile.lastIndexOf('/') + 1)

def dockerfileContent = """
FROM openjdk:19-jdk
WORKDIR /app
COPY target/${jarFileName} /app
EXPOSE 8888
CMD ["java", "-jar", "/app/${jarFileName}"]
                                          """
writeFile file: 'Dockerfile', text: dockerfileContent

                }
            }
         }

             stage('build to docker images') {
            steps {
                script{

                sh 'docker build -t kshrdautopilot/yeaktonghan-spring-maven-war:${CURRENT_DATETIME} .'

                 sh 'docker push kshrdautopilot/yeaktonghan-spring-maven-war:${CURRENT_DATETIME}'

                    echo "build images successfully"

                }

            }
        }
        stage('go to repository'){

                    steps {
                        script {
                            // Clone the GitHub repository
                            checkout([$class: 'GitSCM',
                                branches: [[name: '*/main']],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: true]],
                                submoduleCfg: [],
                                userRemoteConfigs: [[url: "https://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@github.com/KSGA-Autopilot/${GITHUB_REPO}"]]])
                        }
                    }
                }
        stage('Modify File') {
                    steps {
                        script {
                            // Modify the content of the file
                            sh "sed -i 's+kshrdautopilot/yeaktonghan-spring-maven-war.*+kshrdautopilot/yeaktonghan-spring-maven-war:${CURRENT_DATETIME}+g' app/deployment.yaml"
                            sh "cat app/deployment.yaml"
                                }
                            }
                }
                 stage('Commit and Push') {
                    steps {
                        script {
    // Commit the changes
    sh 'git add .'
    sh 'git commit -m "Updated images version" || true'
    // Push the changes back to GitHub
    sh 'git push https://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@github.com/KSGA-Autopilot/${GITHUB_REPO} HEAD:main'
                        }
                    }
                }
                stage('Start argo application') {
                    steps {
                        sshagent(['ssh-keygen']) {
                             sh 'ssh -o StrictHostKeyChecking=no root@167.71.220.235 "argocd login 167.71.220.235:31142 --username admin --password YOUR-PASSWORD-HERE --insecure"'
                                sh 'ssh -o StrictHostKeyChecking=no root@167.71.220.235 kubectl create ns yeaktonghan || true'
                        sh 'ssh -o StrictHostKeyChecking=no root@167.71.220.235 argocd app create -f https://raw.githubusercontent.com/KSGA-Autopilot/yeaktonghan-spring-maven-war-cd/main/application.yaml --upsert'
                        }
                    }
                }
                }
                }

</script>
<sandbox>true</sandbox>
</definition>
<triggers/>
<disabled>false</disabled>
</flow-definition>
